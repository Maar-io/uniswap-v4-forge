# Set environment variables
export WALLET_USER=0x911d82b108804A18022d0A2621B2Fc608DEF6FCA
export BASESEP_MUSD_CONTRACT=0x5f6D35D1Add891416969194709ddd374B6D26253
export BASESEP_USDC_CONTRACT=0x036CbD53842c5426634e7929541eC2318f3dCF7e
export BASESEP_PERMIT2_CONTRACT=0x000000000022D473030F116dDEE9F6B43aC78BA3
export BASESEP_RPC=https://base-sepolia-rpc.publicnode.com
export BASESEP_POOL_MANAGER=0x05E73354cFDd6745C338b50BcFDfA3Aa6fA03408
export BASESEP_POSITION_MANAGER=0x4B2C77d209D3405F41a037Ec6c77F7F5b8e2ca80
export BASESEP_STATE_VIEW=0x571291b572ed32ce6751a2Cb2486EbEe8DEfB9B4
export BASESEP_POOLSWAP_TEST=0x8B5bcC363ddE2614281aD875bad385E0A785D3B9
export BASESEP_POOL_ID=0xBB061A4A6A7A7C0472B15A39812CC6BAD12A7B8E381441BDC8EF98FAF97AA526

# Cast call to check Permit2 allowance for MUSD
echo "\nMUSD Permit2 Allowance for $WALLET_USER:" && ALLOWANCE=$(cast call $BASESEP_MUSD_CONTRACT "allowance(address,address)(uint256)" $WALLET_USER $BASESEP_PERMIT2_CONTRACT --rpc-url $BASESEP_RPC) && echo "Raw Wei: $ALLOWANCE" && echo "Formatted: $(cast from-wei ${ALLOWANCE%% *}) MUSD"

# Cast call to check Permit2 allowance for USDC (6 decimals)
echo "\nUSDC Permit2 Allowance for $WALLET_USER:" && ALLOWANCE=$(cast call $BASESEP_USDC_CONTRACT "allowance(address,address)(uint256)" $WALLET_USER $BASESEP_PERMIT2_CONTRACT --rpc-url $BASESEP_RPC) && echo "Raw Units: $ALLOWANCE" && echo "Formatted: $(cast format-units ${ALLOWANCE%% *} 6) USDC"
echo "\nUSDC Permit2 Allowance for $WALLET_USER:" && ALLOWANCE=$(cast call $BASESEP_USDC_CONTRACT "allowance(address,address)(uint256)" $WALLET_USER $BASESEP_POOLSWAP_TEST --rpc-url $BASESEP_RPC) && echo "Raw Units: $ALLOWANCE" && echo "Formatted: $(cast format-units ${ALLOWANCE%% *} 6) USDC"
cast call $BASESEP_MUSD_CONTRACT "allowance(address,address)(uint256)" $WALLET_USER $BASESEP_POOLSWAP_TEST --rpc-url $BASESEP_RPC

# wallet balance
cast call $BASESEP_MUSD_CONTRACT "balanceOf(address)" $WALLET_USER --rpc-url $BASESEP_RPC | cast to-dec
cast call $BASESEP_MUSD_CONTRACT "balanceOf(address)" $WALLET_USER --rpc-url $BASESEP_RPC | cast to-dec

# Approval
cast send $BASESEP_MUSD_CONTRACT "approve(address,uint256)" $BASESEP_POOLSWAP_TEST "1000000000000000000000" --private-key $PRIVATE_KEY --rpc-url $BASESEP_RPC

# Cast call to balanceOf positions in PositionManager
echo "\nPositionManager Balance for $WALLET_USER:" && BALANCE=$(cast call $BASESEP_POSITION_MANAGER "balanceOf(address)" $WALLET_USER --rpc-url $BASESEP_RPC) && echo "NFT Count: $BALANCE" 

# State View for Pool
echo "\nState View Liquidity for $BASESEP_POOL_ID:" && LIQUIDITY=$(cast call $BASESEP_STATE_VIEW "getLiquidity(bytes32)" $BASESEP_POOL_ID --rpc-url $BASESEP_RPC) && echo "Liquidity (hex): $LIQUIDITY" && echo "Liquidity (decimal): $(cast to-dec $LIQUIDITY)" 

cast call $BASESEP_STATE_VIEW "getSlot0(bytes32)" $BASESEP_POOL_ID --rpc-url $BASESEP_RPC | jq -Rr --arg poolid "$BASESEP_POOL_ID" '
  . as $hex |
  ($hex | ltrimstr("0x")) as $clean |
  {
    "poolId": $poolid,
    "raw": $hex,
    "sqrtPriceX96_hex": ("0x" + $clean[0:64]),
    "tick_hex": ("0x" + $clean[64:112]),
    "protocolFee_hex": ("0x" + $clean[112:128]),
    "lpFee_hex": ("0x" + $clean[(-6):]),
    "Note": "use: cast to-dec <hex_value> to convert hex to decimal"
  }'

# Create Pool and add liquidity, Swap
forge script script/CreatePoolAndAddLiquidity.s.sol:CreatePoolAndAddLiquidityScript \
  --rpc-url https://base-sepolia-rpc.publicnode.com \
  --private-key $PRIVATE_KEY \
  --broadcast \
  -vvvv

forge script script/AddLiquidity.s.sol:AddLiquidity \
  --rpc-url https://base-sepolia-rpc.publicnode.com \
  --private-key $PRIVATE_KEY \
  --broadcast \
  -vvvv

forge script script/Swap.s.sol:SwapScript \
  --rpc-url https://base-sepolia-rpc.publicnode.com \
  --private-key $PRIVATE_KEY \
  --broadcast \
  -vvvv

# === Uniswap V4 Pool Debugging Helpers ===

# 1. Check Pool Liquidity (StateView)
echo "\nPool Liquidity for $BASESEP_POOL_ID:" && \
LIQUIDITY=$(cast call $BASESEP_STATE_VIEW "getLiquidity(bytes32)" $BASESEP_POOL_ID --rpc-url $BASESEP_RPC) && \
echo "Liquidity (hex): $LIQUIDITY" && echo "Liquidity (decimal): $(cast to-dec $LIQUIDITY)"

# 2. Check Pool Slot0 (price, tick, etc)
echo "\nPool Slot0 for $BASESEP_POOL_ID:" && \
cast call $BASESEP_STATE_VIEW "getSlot0(bytes32)" $BASESEP_POOL_ID --rpc-url $BASESEP_RPC

# 3. Check Token Balances in PoolManager
echo "\nMUSD in PoolManager:" && cast call $BASESEP_MUSD_CONTRACT "balanceOf(address)" $BASESEP_POOL_MANAGER --rpc-url $BASESEP_RPC 
echo "USDC in PoolManager:" && cast call $BASESEP_USDC_CONTRACT "balanceOf(address)" $BASESEP_POOL_MANAGER --rpc-url $BASESEP_RPC 

# 4. Check Your Token Balances
echo "\nMUSD in Wallet:" && cast call $BASESEP_MUSD_CONTRACT "balanceOf(address)" $WALLET_USER --rpc-url $BASESEP_RPC | cast from-wei
cast call $BASESEP_USDC_CONTRACT "balanceOf(address)" $WALLET_USER --rpc-url $BASESEP_RPC | cast to-dec

# 5. Check PoolSwapTest Contract Balances
echo "\nMUSD in PoolSwapTest:" && cast call $BASESEP_MUSD_CONTRACT "balanceOf(address)" $BASESEP_POOLSWAP_TEST --rpc-url $BASESEP_RPC | cast from-wei
echo "USDC in PoolSwapTest:" && cast call $BASESEP_USDC_CONTRACT "balanceOf(address)" $BASESEP_POOLSWAP_TEST --rpc-url $BASESEP_RPC | cast format-units 6

# 6. Check Allowances
echo "\nMUSD Allowance for PoolSwapTest:" && cast call $BASESEP_MUSD_CONTRACT "allowance(address,address)(uint256)" $WALLET_USER $BASESEP_POOLSWAP_TEST --rpc-url $BASESEP_RPC
echo "USDC Allowance for PoolSwapTest:" && cast call $BASESEP_USDC_CONTRACT "allowance(address,address)(uint256)" $WALLET_USER $BASESEP_POOLSWAP_TEST --rpc-url $BASESEP_RPC

# 7. Check PositionManager NFT Balance
echo "\nPositionManager NFT Balance for $WALLET_USER:" && cast call $BASESEP_POSITION_MANAGER "balanceOf(address)" $WALLET_USER --rpc-url $BASESEP_RPC

# 8. Check PoolManager's Tick Bitmap (word 0)
echo "\nPoolManager Tick Bitmap (word 0):" && cast call $BASESEP_POOL_MANAGER "getTickBitmap(bytes32,int16)" $BASESEP_POOL_ID 0 --rpc-url $BASESEP_RPC

# 9. Check PoolManager's Tick Info (tickLower and tickUpper)
echo "\nPoolManager Tick Info (tickLower):" && cast call $BASESEP_POOL_MANAGER "getTick(bytes32,int24)" $BASESEP_POOL_ID -5000 --rpc-url $BASESEP_RPC
echo "PoolManager Tick Info (tickUpper):" && cast call $BASESEP_POOL_MANAGER "getTick(bytes32,int24)" $BASESEP_POOL_ID 5000 --rpc-url $BASESEP_RPC

# 10. Check PoolManager's Pool Info
echo "\nPoolManager Pool Info:" && cast call $BASESEP_POOL_MANAGER "getPool(bytes32)" $BASESEP_POOL_ID --rpc-url $BASESEP_RPC


================ SONEIUM ===============
export SONEIUM_USDT0=0x102d758f688a4C1C5a80b116bD945d4455460282
export SONEIUM_USDT=0x3A337a6adA9d885b6Ad95ec48F9b75f197b5AE35
export SONEIUM_USDC=0xbA9986D2381edf1DA03B0B9c1f8b00dc4AacC369
export SONEIUM_POOL_MANAGER=0x360e68faccca8ca495c1b759fd9eee466db9fb32
export SONEIUM_STATE_VIEW=0x76fd297e2d437cd7f76d50f01afe6160f86e9990
export SONEIUM_QUOTER=0x3972C00f7ed4885e145823eb7C655375d275A1C5
export SONEIUM_POSITION_MANAGER=0x1b35d13a2E2528f192637F14B05f0Dc0e7dEB566
export SONEIUM_POOL_ID=0x86d50269915c269f9c1a1ef9a4685133a1dd84ac109ab4964bdbec7a338608be
export SONEIUM_POOL_ID25=0x86d50269915c269f9c1a1ef9a4685133a1dd84ac109ab4964b
export SONEIUM_POOL_ID=0xffe4303dc2500ac8415f8bbae706d12b6dffdc31deda77eb38ccaa04c6c5b8db
export SONEIUM_POOL_ID25=0xffe4303dc2500ac8415f8bbae706d12b6dffdc31deda77eb38
export SONEIUM_POOL_ID=0xf3e830c1da458d939a0173f0843fba7208e12022ab1d60f3fd7539374d02673d
export SONEIUM_POOL_ID25=0xf3e830c1da458d939a0173f0843fba7208e12022ab1d60f3fd

# get pool quote

cast call $SONEIUM_STATE_VIEW "getLiquidity(bytes32)" $SONEIUM_POOL_ID --rpc-url $SON_RPC
cast call $SONEIUM_STATE_VIEW "getSlot0(bytes32)" $SONEIUM_POOL_ID --rpc-url $SON_RPC | jq -Rr --arg poolid "$BASESEP_POOL_ID" '
  . as $hex |
  ($hex | ltrimstr("0x")) as $clean |
  {
    "poolId": $poolid,
    "raw": $hex,
    "sqrtPriceX96_hex": ("0x" + $clean[0:64]),
    "tick_hex": ("0x" + $clean[64:112]),
    "protocolFee_hex": ("0x" + $clean[112:128]),
    "lpFee_hex": ("0x" + $clean[(-6):]),
    "Note": "use: cast to-dec <hex_value> to convert hex to decimal"
  }'

cast call $SONEIUM_POSITION_MANAGER "poolKeys(bytes25)(address,address,uint24,int24,address)" $SONEIUM_POOL_ID25 --rpc-url $SON_RPC

## find quote for this pool
0x102d758f688a4C1C5a80b116bD945d4455460282
0x3A337a6adA9d885b6Ad95ec48F9b75f197b5AE35
5000
100
0x0000000000000000000000000000000000000000

0x102d758f688a4C1C5a80b116bD945d4455460282
0xbA9986D2381edf1DA03B0B9c1f8b00dc4AacC369
500
10
0x0000000000000000000000000000000000000000

0x3A337a6adA9d885b6Ad95ec48F9b75f197b5AE35
0xbA9986D2381edf1DA03B0B9c1f8b00dc4AacC369
50
1
0x0000000000000000000000000000000000000000

cast call $SONEIUM_QUOTER "quoteExactInputSingle((address,address,uint24,int24,address),bool,uint128,bytes)" '(0x102d758f688a4C1C5a80b116bD945d4455460282,0x3A337a6adA9d885b6Ad95ec48F9b75f197b5AE35,5000,100,0x0000000000000000000000000000000000000000)' true 1000000 0x --rpc-url $SON_RPC


cast send 0x0E2850543f69F678257266E0907fF9A58B3F13dE \
  "execute(bytes,bytes[],uint256)" \
  0x0a \
  $SWAP_INPUT \
  1752255077 \
  --private-key $PRIVATE_KEY \
  --rpc-url https://rpc.soneium.org


export WALLET_USER=0x911d82b108804A18022d0A2621B2Fc608DEF6FCA
export SEPOLIA_MUSD_CONTRACT=0x65675DCB0558030eaE5fc3E42a41df576cc437Ef
export SEPOLIA_USDC_CONTRACT=0x1c7D4B196Cb0C7B01d743Fbc6116a902379C7238
export PERMIT2_ADDRESS=0x000000000022D473030F116dDEE9F6B43aC78BA3
export SEPOLIA_RPC=https://ethereum-sepolia.publicnode.com
export SEPOLIA_POOL_MANAGER=0xE03A1074c86CFeDd5C142C4F04F1a1536e203543
export SEPOLIA_POSITION_MANAGER=0x429ba70129df741B2Ca2a85BC3A2a3328e5c09b4
export SEPOLIA_STATE_VIEW=0xe1dd9c3fa50edb962e442f60dfbc432e24537e4c
export SEPOLIA_UNIVERSAL_ROUTER=0x3A9D48AB9751398BbFa63ad67599Bb04e4BdF98b
export SEPOLIA_POOL_ID=0x3F7C20DC9A208115DD9C142920C2820CDE1D272FC22BB4B3F939E6C9C1479E8C
export SEPOLIA_POOL_ID_25=0x3F7C20DC9A208115DD9C142920C2820CDE1D272FC22BB4B3F9

echo "\nPositionManager Balance for $WALLET_USER:" && BALANCE=$(cast call $SEPOLIA_POSITION_MANAGER "balanceOf(address)" $WALLET_USER --rpc-url $SEPOLIA_RPC) && echo "NFT Count: $BALANCE" 

cast call $SEPOLIA_STATE_VIEW "getSlot0(bytes32)" $SEPOLIA_POOL_ID --rpc-url $SEPOLIA_RPC | jq -Rr --arg poolid "$SEPOLIA_POOL_ID" '
  . as $hex |
  ($hex | ltrimstr("0x")) as $clean |
  {
    "poolId": $poolid,
    "raw": $hex,
    "sqrtPriceX96_hex": ("0x" + $clean[0:64]),
    "tick_hex": ("0x" + $clean[64:112]),
    "protocolFee_hex": ("0x" + $clean[112:128]),
    "lpFee_hex": ("0x" + $clean[(-6):]),
    "Note": "use: cast to-dec <hex_value> to convert hex to decimal"
  }'

cast call $SEPOLIA_POSITION_MANAGER "poolKeys(bytes25)(address,address,uint24,int24,address)" $SEPOLIA_POOL_ID_25 --rpc-url $SEPOLIA_RPC

cast call $SEPOLIA_STATE_VIEW "getLiquidity(bytes32)(uint128)" $SEPOLIA_POOL_ID --rpc-url $SEPOLIA_RPC | jq -Rr 

cast call $PERMIT2_ADDRESS "allowance(address,address,address)(uint160,uint48,uint48)" \
     $WALLET_USER $SEPOLIA_USDC_CONTRACT $SEPOLIA_UNIVERSAL_ROUTER \
     --rpc-url https://ethereum-sepolia.publicnode.com

cast call $PERMIT2_ADDRESS "allowance(address,address,address)(uint160,uint48,uint48)" \
     $WALLET_USER $SEPOLIA_MUSD_CONTRACT $SEPOLIA_UNIVERSAL_ROUTER \
     --rpc-url https://ethereum-sepolia.publicnode.com

cast send $PERMIT2_ADDRESS "approve(address,address,uint160,uint48)" \
  $SEPOLIA_MUSD_CONTRACT $SEPOLIA_UNIVERSAL_ROUTER 10000000 1752680070 \
  --rpc-url https://ethereum-sepolia.publicnode.com --private-key $PRIVATE_KEY

cast send $PERMIT2_ADDRESS "approve(address,address,uint160,uint48)" \
  $SEPOLIA_MUSD_CONTRACT $WALLET_USER 10000000 1752780070 \
  --rpc-url https://ethereum-sepolia.publicnode.com --private-key $PRIVATE_KEY

cast send $PERMIT2_ADDRESS "transferFrom(address,address,uint160,address)" \
  $WALLET_USER 0x229831f48cd408Bf862C600e46FF864De071c16B 1200000 $SEPOLIA_MUSD_CONTRACT  \
  --rpc-url https://ethereum-sepolia.publicnode.com --private-key $PRIVATE_KEY

cast call $SEPOLIA_USDC_CONTRACT "balanceOf(address)(uint256)" $WALLET_USER --rpc-url $SEPOLIA_RPC
cast call $SEPOLIA_MUSD_CONTRACT "balanceOf(address)(uint256)" $WALLET_USER --rpc-url $SEPOLIA_RPC